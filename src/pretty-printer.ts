import StellaVisitor from './stella/stellaParserVisitor';
import {
  ProgramContext,
  AnExtensionContext,
  DeclContext,
  DeclFunContext,
  DeclTypeAliasContext,
  ExprContext,
  DotRecordContext,
  DotTupleContext,
  ConstTrueContext,
  ConstFalseContext,
  ConstUnitContext,
  ConstIntContext,
  VarContext,
  InlContext,
  InrContext,
  ConsListContext,
  HeadContext,
  IsEmptyContext,
  TailContext,
  SuccContext,
  LogicNotContext,
  PredContext,
  IsZeroContext,
  FixContext,
  NatRecContext,
  FoldContext,
  UnfoldContext,
  ApplicationContext,
  MultiplyContext,
  DivideContext,
  LogicAndContext,
  AddContext,
  SubtractContext,
  LogicOrContext,
  AbstractionContext,
  TypeAscContext,
  TupleContext,
  RecordContext,
  VariantContext,
  MatchContext,
  ListContext,
  LessThanContext,
  LessThanOrEqualContext,
  GreaterThanContext,
  GreaterThanOrEqualContext,
  EqualContext,
  NotEqualContext,
  IfContext,
  LetContext,
  LetRecContext,
  ParenthesisedExprContext,
  SequenceContext,
  ParamDeclContext,
  StellatypeContext,
  TypeNatContext,
  TypeBoolContext,
  TypeFunContext,
  TypeRecContext,
  TypeSumContext,
  TypeTupleContext,
  RecordFieldTypeContext,
  TypeRecordContext,
  VariantFieldTypeContext,
  TypeVariantContext,
  TypeListContext,
  TypeUnitContext,
  TypeVarContext,
  TypeParensContext,
  MatchCaseContext,
  PatternBindingContext,
  BindingContext,
  PatternContext,
  PatternVariantContext,
  PatternInlContext,
  PatternInrContext,
  PatternTupleContext,
  PatternRecordContext,
  PatternListContext,
  PatternConsContext,
  PatternFalseContext,
  PatternTrueContext,
  PatternUnitContext,
  PatternIntContext,
  PatternSuccContext,
  PatternVarContext,
  ParenthesisedPatternContext,
  LabelledPatternContext,
  AssignContext,
  TypeCastContext,
  RefContext,
  DerefContext,
  PanicContext,
  ThrowContext,
  TryCatchContext,
  TryWithContext,
  TypeRefContext,
  TypeForAllContext,
  DeclFunGenericContext,
  DeclExceptionTypeContext,
  DeclExceptionVariantContext,
  TypeAbstractionContext,
  TypeApplicationContext,
  TerminatingSemicolonContext,
  ConstMemoryContext,
  PatternAscContext,
  TypeAutoContext,
  TypeTopContext,
  TypeBottomContext,
  PatternCastAsContext,
  TryCastAsContext,
} from './stella/stellaParser';

/**
 * This visitor transforms the concrete syntax tree generated by ANTLR back into pretty program text.
 */
export class PrettyPrinter extends StellaVisitor<string> {
  depth = 0;

  visitProgram = (ctx: ProgramContext) => {
    const langCore = `language core;`;

    const extensions = ctx._extensions
      .map((e) => {
        const ex = e as AnExtensionContext;
        return (
          'extend with ' +
          ex._extensionNames.map((name) => name.text).join(', ') +
          ';'
        );
      })
      .join('\n');

    const declarations = ctx._decls.map(this.visitDecl).join('\n\n');

    return (
      langCore +
      '\n' +
      (extensions.length ? '\n' + extensions + '\n' : '') +
      '\n' +
      declarations
    );
  };

  visitDecl = (ctx: DeclContext): string => {
    if (ctx instanceof DeclFunContext) {
      return this.visitDeclFun(ctx);
    }
    if (ctx instanceof DeclFunGenericContext) {
      return this.visitDeclFunGeneric(ctx);
    }
    if (ctx instanceof DeclTypeAliasContext) {
      return this.visitDeclTypeAlias(ctx);
    }
    if (ctx instanceof DeclExceptionTypeContext) {
      return this.visitDeclExceptionType(ctx);
    }
    if (ctx instanceof DeclExceptionVariantContext) {
      return this.visitDeclExceptionVariant(ctx);
    }
    throw Error('Unknown declaration type: ' + ctx.getText());
  };

  visitDeclFun = (ctx: DeclFunContext) => {
    const indentation = ' '.repeat(this.depth * 2);
    this.depth++;
    const annotations = ctx._annotations.map((a) => a.getText()).join(' ');
    const returnValue = this.visitExpr(ctx._returnExpr);
    const nestedDeclarations = ctx._localDecls.map(this.visitDecl);
    const funcName = ctx._name.text;
    const parameters = ctx.paramDecl_list().map(this.visitParamDecl).join(', ');
    const returnType = ctx._returnType ? this.visitType(ctx._returnType) : '';
    const throwTypes = ctx._throwTypes.map(this.visitType).join(', ');
    const throws = throwTypes.length ? ` throws ${throwTypes}` : '';

    const annotationsSpace = annotations.length ? ' ' : '';

    const ret = `${indentation}${annotations}${annotationsSpace}fn ${funcName}(${parameters}) -> ${returnType}${throws} {${
      nestedDeclarations?.length ? '\n' + nestedDeclarations.join('\n') : ''
    }
${indentation}  return ${returnValue}
${indentation}}`;
    this.depth--;
    return ret;
  };
  visitDeclFunGeneric = (ctx: DeclFunGenericContext) => {
    const indentation = ' '.repeat(this.depth * 2);
    this.depth++;
    const annotations = ctx._annotations.map((a) => a.getText()).join(' ');
    const returnValue = this.visitExpr(ctx._returnExpr);
    const nestedDeclarations = ctx._localDecls.map(this.visitDecl);
    const funcName = ctx._name.text;
    const parameters = ctx.paramDecl_list().map(this.visitParamDecl).join(', ');
    const returnType = ctx._returnType ? this.visitType(ctx._returnType) : '';
    const throwTypes = ctx._throwTypes.map(this.visitType).join(', ');
    const throws = throwTypes.length ? ` throws ${throwTypes}` : '';

    const annotationsSpace = annotations.length ? ' ' : '';

    const ret = `${indentation}${annotations}${annotationsSpace}generic fn ${funcName}[${ctx._generics
      .map((token) => token.text)
      .join(', ')}](${parameters}) -> ${returnType}${throws} {${
      nestedDeclarations?.length ? '\n' + nestedDeclarations.join('\n') : ''
    }
${indentation}  return ${returnValue}
${indentation}}`;
    this.depth--;
    return ret;
  };
  visitDeclTypeAlias = (ctx: DeclTypeAliasContext) =>
    `type ${ctx._name.text} = ${this.visitType(ctx._atype)}`;
  visitDeclExceptionType = (ctx: DeclExceptionTypeContext) =>
    `exception type = ${this.visitType(ctx._exceptionType)}`;
  visitDeclExceptionVariant = (ctx: DeclExceptionVariantContext) =>
    `exception variant ${ctx._name.text} : ${ctx._variantType}`;

  visitExpr = (ctx: ExprContext): string => {
    if (ctx instanceof DotRecordContext) {
      return this.visitDotRecord(ctx);
    }
    if (ctx instanceof DotTupleContext) {
      return this.visitDotTuple(ctx);
    }
    if (ctx instanceof ConstTrueContext) {
      return this.visitConstTrue(ctx);
    }
    if (ctx instanceof ConstFalseContext) {
      return this.visitConstFalse(ctx);
    }
    if (ctx instanceof ConstUnitContext) {
      return this.visitConstUnit(ctx);
    }
    if (ctx instanceof ConstIntContext) {
      return this.visitConstInt(ctx);
    }
    if (ctx instanceof VarContext) {
      return this.visitVar(ctx);
    }
    if (ctx instanceof InlContext) {
      return this.visitInl(ctx);
    }
    if (ctx instanceof InrContext) {
      return this.visitInr(ctx);
    }
    if (ctx instanceof ConsListContext) {
      return this.visitConsList(ctx);
    }
    if (ctx instanceof HeadContext) {
      return this.visitHead(ctx);
    }
    if (ctx instanceof IsEmptyContext) {
      return this.visitIsEmpty(ctx);
    }
    if (ctx instanceof TailContext) {
      return this.visitTail(ctx);
    }
    if (ctx instanceof SuccContext) {
      return this.visitSucc(ctx);
    }
    if (ctx instanceof LogicNotContext) {
      return this.visitLogicNot(ctx);
    }
    if (ctx instanceof PredContext) {
      return this.visitPred(ctx);
    }
    if (ctx instanceof IsZeroContext) {
      return this.visitIsZero(ctx);
    }
    if (ctx instanceof FixContext) {
      return this.visitFix(ctx);
    }
    if (ctx instanceof NatRecContext) {
      return this.visitNatRec(ctx);
    }
    if (ctx instanceof FoldContext) {
      return this.visitFold(ctx);
    }
    if (ctx instanceof UnfoldContext) {
      return this.visitUnfold(ctx);
    }
    if (ctx instanceof ApplicationContext) {
      return this.visitApplication(ctx);
    }
    if (ctx instanceof TypeApplicationContext) {
      return this.visitTypeApplication(ctx);
    }
    if (ctx instanceof MultiplyContext) {
      return this.visitMultiply(ctx);
    }
    if (ctx instanceof DivideContext) {
      return this.visitDivide(ctx);
    }
    if (ctx instanceof LogicAndContext) {
      return this.visitLogicAnd(ctx);
    }
    if (ctx instanceof AddContext) {
      return this.visitAdd(ctx);
    }
    if (ctx instanceof SubtractContext) {
      return this.visitSubtract(ctx);
    }
    if (ctx instanceof LogicOrContext) {
      return this.visitLogicOr(ctx);
    }
    if (ctx instanceof AbstractionContext) {
      return this.visitAbstraction(ctx);
    }
    if (ctx instanceof TypeAbstractionContext) {
      return this.visitTypeAbstraction(ctx);
    }
    if (ctx instanceof TypeAscContext) {
      return this.visitTypeAsc(ctx);
    }
    if (ctx instanceof TupleContext) {
      return this.visitTuple(ctx);
    }
    if (ctx instanceof RecordContext) {
      return this.visitRecord(ctx);
    }
    if (ctx instanceof VariantContext) {
      return this.visitVariant(ctx);
    }
    if (ctx instanceof MatchContext) {
      return this.visitMatch(ctx);
    }
    if (ctx instanceof ListContext) {
      return this.visitList(ctx);
    }
    if (ctx instanceof LessThanContext) {
      return this.visitLessThan(ctx);
    }
    if (ctx instanceof LessThanOrEqualContext) {
      return this.visitLessThanOrEqual(ctx);
    }
    if (ctx instanceof GreaterThanContext) {
      return this.visitGreaterThan(ctx);
    }
    if (ctx instanceof GreaterThanOrEqualContext) {
      return this.visitGreaterThanOrEqual(ctx);
    }
    if (ctx instanceof EqualContext) {
      return this.visitEqual(ctx);
    }
    if (ctx instanceof NotEqualContext) {
      return this.visitNotEqual(ctx);
    }
    if (ctx instanceof IfContext) {
      return this.visitIf(ctx);
    }
    if (ctx instanceof LetContext) {
      return this.visitLet(ctx);
    }
    if (ctx instanceof LetRecContext) {
      return this.visitLetRec(ctx);
    }
    if (ctx instanceof ParenthesisedExprContext) {
      return this.visitParenthesisedExpr(ctx);
    }
    if (ctx instanceof SequenceContext) {
      return this.visitSequence(ctx);
    }
    if (ctx instanceof AssignContext) {
      return this.visitAssign(ctx);
    }
    if (ctx instanceof TypeCastContext) {
      return this.visitTypeCast(ctx);
    }
    if (ctx instanceof TryCastAsContext) {
      return this.visitTryCastAs(ctx);
    }
    if (ctx instanceof RefContext) {
      return this.visitRef(ctx);
    }
    if (ctx instanceof DerefContext) {
      return this.visitDeref(ctx);
    }
    if (ctx instanceof PanicContext) {
      return this.visitPanic(ctx);
    }
    if (ctx instanceof ThrowContext) {
      return this.visitThrow(ctx);
    }
    if (ctx instanceof TryCatchContext) {
      return this.visitTryCatch(ctx);
    }
    if (ctx instanceof TryWithContext) {
      return this.visitTryWith(ctx);
    }
    if (ctx instanceof ConstMemoryContext) {
      return this.visitConstMemory(ctx);
    }

    throw new Error('Unknown expression type: ' + ctx.getText());
  };

  visitDotRecord = (ctx: DotRecordContext) =>
    `${this.visitExpr(ctx._expr_)}.${ctx._label.text}`;

  visitDotTuple = (ctx: DotTupleContext) =>
    `${this.visitExpr(ctx._expr_)}.${ctx._index.text}`;
  visitConstUnit = (ctx: ConstUnitContext) => 'unit';

  visitVar = (ctx: VarContext) => ctx._name.text;
  visitInl = (ctx: InlContext) => `inl(${this.visitExpr(ctx._expr_)})`;
  visitInr = (ctx: InrContext) => `inr(${this.visitExpr(ctx._expr_)})`;

  visitConsList = (ctx: ConsListContext) =>
    `cons(${this.visitExpr(ctx._head)}, ${this.visitExpr(ctx._tail)})`;
  visitHead = (ctx: HeadContext) => `List::head(${this.visitExpr(ctx._list)})`;
  visitIsEmpty = (ctx: IsEmptyContext) =>
    `List::isempty(${this.visitExpr(ctx._list)})`;
  visitTail = (ctx: TailContext) => `List::tail(${this.visitExpr(ctx._list)})`;
  visitLogicNot = (ctx: LogicNotContext) =>
    `not(${this.visitExpr(ctx._expr_)})`;
  visitPred = (ctx: PredContext) => `Nat::pred(${this.visitExpr(ctx._n)})`;
  visitIsZero = (ctx: IsZeroContext) =>
    `Nat::iszero(${this.visitExpr(ctx._n)})`;
  visitFix = (ctx: FixContext) => `fix(${this.visitExpr(ctx._expr_)})`;
  visitNatRec = (ctx: NatRecContext) =>
    `Nat::rec(${this.visitExpr(ctx._n)}, ${this.visitExpr(
      ctx._initial
    )}, ${this.visitExpr(ctx._step)})`;
  visitFold = (ctx: FoldContext) =>
    `fold[${this.visitType(ctx._type_)}] ${this.visitExpr(ctx._expr_)}`;
  visitUnfold = (ctx: UnfoldContext) =>
    `unfold[${this.visitType(ctx._type_)}] ${this.visitExpr(ctx._expr_)}`;
  visitMultiply = (ctx: MultiplyContext) =>
    `${this.visitExpr(ctx._left)} * ${this.visitExpr(ctx._right)}`;
  visitDivide = (ctx: DivideContext) =>
    `${this.visitExpr(ctx._left)} / ${this.visitExpr(ctx._right)}`;
  visitLogicAnd = (ctx: LogicAndContext) =>
    `${this.visitExpr(ctx._left)} and ${this.visitExpr(ctx._right)}`;
  visitAdd = (ctx: AddContext) =>
    `${this.visitExpr(ctx._left)} + ${this.visitExpr(ctx._right)}`;
  visitSubtract = (ctx: SubtractContext) =>
    `${this.visitExpr(ctx._left)} - ${this.visitExpr(ctx._right)}`;
  visitLogicOr = (ctx: LogicOrContext) =>
    `${this.visitExpr(ctx._left)} or ${this.visitExpr(ctx._right)}`;
  visitAbstraction = (ctx: AbstractionContext) => {
    const indentation = ' '.repeat(this.depth * 2);
    this.depth++;
    const returnValue = this.visitExpr(ctx._returnExpr);
    const parameters = ctx.paramDecl_list().map(this.visitParamDecl).join(', ');

    const ret = `fn (${parameters}) {
${indentation}  return ${returnValue}
${indentation}}`;
    this.depth--;
    return ret;
  };
  visitTypeAbstraction = (ctx: TypeAbstractionContext) =>
    `generic [${ctx._generics
      .map((token) => token.text)
      .join(', ')}] ${this.visitExpr(ctx._expr_)}`;

  visitApplication = (ctx: ApplicationContext) =>
    `${this.visitExpr(ctx._fun)}(${ctx._args.map(this.visitExpr).join(', ')})`;
  visitTypeApplication = (ctx: TypeApplicationContext) =>
    `${this.visitExpr(ctx._fun)}[${ctx._types.map(this.visitType).join(', ')}]`;

  visitSucc = (ctx: SuccContext) => `succ(${this.visitExpr(ctx._n)})`;

  visitConstInt = (ctx: ConstIntContext) => ctx._n.text;
  visitConstTrue = (_: ConstTrueContext) => 'true';
  visitConstFalse = (_: ConstFalseContext) => 'false';
  visitConstMemory = (ctx: ConstMemoryContext) => ctx._mem.text;

  visitAssign = (ctx: AssignContext) =>
    `${this.visitExpr(ctx._lhs)} := ${this.visitExpr(ctx._rhs)}`;
  visitTypeCast = (ctx: TypeCastContext) =>
    `${this.visitExpr(ctx._expr_)} cast as ${this.visitType(ctx._type_)}`;
  visitTryCastAs = (ctx: TryCastAsContext) =>
    `try { ${this.visitExpr(ctx._tryExpr)} } cast as ${this.visitType(
      ctx._type_
    )} { ${this.visitPattern(ctx._pattern_)} => ${this.visitExpr(
      ctx._expr_
    )} } with { ${this.visitExpr(ctx._fallbackExpr)} }`;
  visitRef = (ctx: RefContext) => `new ${this.visitExpr(ctx._expr_)}`;
  visitDeref = (ctx: DerefContext) => `*${this.visitExpr(ctx._expr_)}`;
  visitPanic = (ctx: PanicContext) => 'panic!';
  visitThrow = (ctx: ThrowContext) => `throw (${this.visitExpr(ctx._expr_)})`;
  visitTryCatch = (ctx: TryCatchContext) => {
    const indentation = ' '.repeat(this.depth * 2);
    const bodyIndentation = ' '.repeat((this.depth + 1) * 2);
    this.depth++;
    const ret = `try {\n${bodyIndentation}${this.visitExpr(
      ctx._tryExpr
    )}\n${indentation}} catch {\n${bodyIndentation}${this.visitPattern(
      ctx._pat
    )} => ${this.visitExpr(ctx._fallbackExpr)}\n${indentation}}`;
    this.depth--;
    return ret;
  };
  visitTryWith = (ctx: TryWithContext) => {
    const indentation = ' '.repeat(this.depth * 2);
    const bodyIndentation = ' '.repeat((this.depth + 1) * 2);
    this.depth++;
    const ret = `try {\n${bodyIndentation}${this.visitExpr(
      ctx._tryExpr
    )}\n${indentation}} with {\n${bodyIndentation}${this.visitExpr(
      ctx._fallbackExpr
    )}\n${indentation}}`;
    this.depth--;
    return ret;
  };

  visitParamDecl = (ctx: ParamDeclContext) =>
    `${ctx._name.text} : ${this.visitType(ctx._paramType)}`;

  visitType = (ctx: StellatypeContext): string => {
    if (ctx instanceof TypeAutoContext) {
      return this.visitTypeAuto(ctx);
    }
    if (ctx instanceof TypeNatContext) {
      return this.visitTypeNat(ctx);
    }
    if (ctx instanceof TypeBoolContext) {
      return this.visitTypeBool(ctx);
    }
    if (ctx instanceof TypeTopContext) {
      return this.visitTypeTop(ctx);
    }
    if (ctx instanceof TypeBottomContext) {
      return this.visitTypeBottom(ctx);
    }
    if (ctx instanceof TypeFunContext) {
      return this.visitTypeFun(ctx);
    }
    if (ctx instanceof TypeRecContext) {
      return this.visitTypeRec(ctx);
    }
    if (ctx instanceof TypeSumContext) {
      return this.visitTypeSum(ctx);
    }
    if (ctx instanceof TypeTupleContext) {
      return this.visitTypeTuple(ctx);
    }
    if (ctx instanceof RecordFieldTypeContext) {
      return this.visitRecordFieldType(ctx);
    }
    if (ctx instanceof TypeRecordContext) {
      return this.visitTypeRecord(ctx);
    }
    if (ctx instanceof VariantFieldTypeContext) {
      return this.visitVariantFieldType(ctx);
    }
    if (ctx instanceof TypeVariantContext) {
      return this.visitTypeVariant(ctx);
    }
    if (ctx instanceof TypeListContext) {
      return this.visitTypeList(ctx);
    }
    if (ctx instanceof TypeUnitContext) {
      return this.visitTypeUnit(ctx);
    }
    if (ctx instanceof TypeVarContext) {
      return this.visitTypeVar(ctx);
    }
    if (ctx instanceof TypeParensContext) {
      return this.visitTypeParens(ctx);
    }
    if (ctx instanceof TypeRefContext) {
      return this.visitTypeRef(ctx);
    }
    if (ctx instanceof TypeForAllContext) {
      return this.visitTypeForAll(ctx);
    }
    throw new Error('Unknown type: ' + ctx.getText());
  };

  visitTypeAuto = (ctx: TypeAutoContext) => 'auto';
  visitTypeNat = (ctx: TypeNatContext) => 'Nat';
  visitTypeBool = (ctx: TypeBoolContext) => 'Bool';
  visitTypeTop = (ctx: TypeTopContext) => 'Top';
  visitTypeBottom = (ctx: TypeBottomContext) => 'Bot';

  visitTypeFun = (ctx: TypeFunContext) =>
    `fn(${ctx._paramTypes.map(this.visitType).join(', ')}) -> ${this.visitType(
      ctx._returnType
    )}`;
  visitTypeRec = (ctx: TypeRecContext) =>
    `µ ${ctx._var_.text} . ${this.visitType(ctx._type_)}`;
  visitTypeSum = (ctx: TypeSumContext) =>
    `${this.visitType(ctx._left)} + ${this.visitType(ctx._right)}`;
  visitTypeTuple = (ctx: TypeTupleContext) =>
    `{ ${ctx._types.map(this.visitType).join(', ')} }`;
  visitRecordFieldType = (ctx: RecordFieldTypeContext) =>
    `${ctx._label.text} : ${this.visitType(ctx._type_)}`;
  visitTypeRecord = (ctx: TypeRecordContext) =>
    `{ ${ctx._fieldTypes.map(this.visitRecordFieldType).join(', ')} }`;
  visitVariantFieldType = (ctx: VariantFieldTypeContext) =>
    `${ctx._label.text}${ctx._type_ ? ': ' + this.visitType(ctx._type_) : ''}`;
  visitTypeVariant = (ctx: TypeVariantContext) =>
    `<| ${ctx._fieldTypes.map(this.visitVariantFieldType).join(', ')} |>`;
  visitTypeList = (ctx: TypeListContext) => `[ ${this.visitType(ctx._type_)} ]`;
  visitTypeUnit = (ctx: TypeUnitContext) => 'Unit';
  visitTypeVar = (ctx: TypeVarContext) => ctx._name.text;
  visitTypeParens = (ctx: TypeParensContext) =>
    `(${this.visitType(ctx._type_)})`;
  visitTypeRef = (ctx: TypeRefContext) => `&${this.visitType(ctx._type_)}`;
  visitTypeForAll = (ctx: TypeForAllContext) =>
    `forall ${ctx._types.map((type) => type.text).join(' ')} . ${this.visitType(
      ctx._type_
    )}`;

  visitTypeAsc = (ctx: TypeAscContext) =>
    `${this.visitExpr(ctx._expr_)} as ${this.visitType(ctx._type_)}`;

  visitTuple = (ctx: TupleContext) =>
    `{ ${ctx._exprs ? ctx._exprs.map(this.visitExpr).join(', ') : ''} }`;
  visitRecord = (ctx: RecordContext) =>
    `{ ${ctx._bindings.map(this.visitBinding).join(', ')} }`;
  visitVariant = (ctx: VariantContext) =>
    `<| ${ctx._label.text}${
      ctx._rhs ? '= ' + this.visitExpr(ctx._rhs) : ''
    } |>`;
  visitMatch = (ctx: MatchContext) => {
    const indentation = ' '.repeat(this.depth * 2);
    const caseIndentation = ' '.repeat((this.depth + 1) * 2);
    this.depth++;
    const ret = `match ${this.visitExpr(ctx._expr_)} {\n${ctx._cases
      .map(this.visitMatchCase)
      .join(`\n${caseIndentation}| `)}\n${indentation}}`;
    this.depth--;
    return ret;
  };
  visitMatchCase = (ctx: MatchCaseContext) =>
    `${this.visitPattern(ctx._pattern_)} => ${this.visitExpr(ctx._expr_)}`;
  visitList = (ctx: ListContext) =>
    `[${ctx._exprs?.map(this.visitExpr).join(', ') ?? ''}]`;
  visitLessThan = (ctx: LessThanContext) =>
    `${this.visitExpr(ctx._left)} < ${this.visitExpr(ctx._right)}`;
  visitLessThanOrEqual = (ctx: LessThanOrEqualContext) =>
    `${this.visitExpr(ctx._left)} <= ${this.visitExpr(ctx._right)}`;
  visitGreaterThan = (ctx: GreaterThanContext) =>
    `${this.visitExpr(ctx._left)} > ${this.visitExpr(ctx._right)}`;
  visitGreaterThanOrEqual = (ctx: GreaterThanOrEqualContext) =>
    `${this.visitExpr(ctx._left)} >= ${this.visitExpr(ctx._right)}`;
  visitEqual = (ctx: EqualContext) =>
    `${this.visitExpr(ctx._left)} == ${this.visitExpr(ctx._right)}`;
  visitNotEqual = (ctx: NotEqualContext) =>
    `${this.visitExpr(ctx._left)} != ${this.visitExpr(ctx._right)}`;
  visitIf = (ctx: IfContext) =>
    `if ${this.visitExpr(ctx._condition)} then ${this.visitExpr(
      ctx._thenExpr
    )} else ${this.visitExpr(ctx._elseExpr)}`;
  visitLet = (ctx: LetContext) =>
    `let ${ctx._patternBindings
      .map(this.visitPatternBinding)
      .join(', ')} in ${this.visitExpr(ctx._body)}`;
  visitLetRec = (ctx: LetRecContext) =>
    `letrec ${ctx._patternBindings
      .map(this.visitPatternBinding)
      .join(', ')} in ${this.visitExpr(ctx._body)}`;
  visitPatternBinding = (ctx: PatternBindingContext) =>
    `${this.visitPattern(ctx._pat)} = ${this.visitExpr(ctx._rhs)}`;
  visitSequence = (ctx: SequenceContext) => {
    const indentation = ' '.repeat(this.depth * 2);
    return `${this.visitExpr(ctx._expr1)};\n${indentation}${this.visitExpr(
      ctx._expr2
    )}`;
  };
  visitTerminatingSemicolon = (ctx: TerminatingSemicolonContext) =>
    `${this.visitExpr(ctx._expr_)};`;

  visitParenthesisedExpr = (ctx: ParenthesisedExprContext) =>
    `(${this.visitExpr(ctx._expr_)})`;

  visitBinding = (ctx: BindingContext) =>
    `${ctx._name.text} = ${this.visitExpr(ctx._rhs)}`;

  visitPattern = (ctx: PatternContext): string => {
    if (ctx instanceof PatternVariantContext) {
      return this.visitPatternVariant(ctx);
    }
    if (ctx instanceof PatternAscContext) {
      return this.visitPatternAsc(ctx);
    }
    if (ctx instanceof PatternCastAsContext) {
      return this.visitPatternCastAs(ctx);
    }
    if (ctx instanceof PatternInlContext) {
      return this.visitPatternInl(ctx);
    }
    if (ctx instanceof PatternInrContext) {
      return this.visitPatternInr(ctx);
    }
    if (ctx instanceof PatternTupleContext) {
      return this.visitPatternTuple(ctx);
    }
    if (ctx instanceof PatternRecordContext) {
      return this.visitPatternRecord(ctx);
    }
    if (ctx instanceof PatternListContext) {
      return this.visitPatternList(ctx);
    }
    if (ctx instanceof PatternConsContext) {
      return this.visitPatternCons(ctx);
    }
    if (ctx instanceof PatternFalseContext) {
      return this.visitPatternFalse(ctx);
    }
    if (ctx instanceof PatternTrueContext) {
      return this.visitPatternTrue(ctx);
    }
    if (ctx instanceof PatternUnitContext) {
      return this.visitPatternUnit(ctx);
    }
    if (ctx instanceof PatternIntContext) {
      return this.visitPatternInt(ctx);
    }
    if (ctx instanceof PatternSuccContext) {
      return this.visitPatternSucc(ctx);
    }
    if (ctx instanceof PatternVarContext) {
      return this.visitPatternVar(ctx);
    }
    if (ctx instanceof ParenthesisedPatternContext) {
      return this.visitParenthesisedPattern(ctx);
    }

    throw new Error('Unknown pattern type: ' + ctx.getText());
  };

  visitPatternVariant = (ctx: PatternVariantContext) =>
    `<| ${ctx._label.text}${
      ctx._pattern_ ? ' = ' + this.visitPattern(ctx._pattern_) : ''
    } |>`;
  visitPatternAsc = (ctx: PatternAscContext) =>
    `${this.visitPattern(ctx._pattern_)} as ${this.visitType(ctx._type_)}`;
  visitPatternCastAs = (ctx: PatternCastAsContext) =>
    `${this.visitPattern(ctx._pattern_)} cast as ${this.visitType(ctx._type_)}`;
  visitPatternInl = (ctx: PatternInlContext) =>
    `inl(${this.visitPattern(ctx._pattern_)})`;
  visitPatternInr = (ctx: PatternInrContext) =>
    `inr(${this.visitPattern(ctx._pattern_)})`;
  visitPatternTuple = (ctx: PatternTupleContext) =>
    `{${ctx._patterns?.map(this.visitPattern).join(', ') ?? ''}}`;
  visitLabelledPattern = (ctx: LabelledPatternContext) =>
    `${ctx._label.text} = ${this.visitPattern(ctx._pattern_)}`;
  visitPatternRecord = (ctx: PatternRecordContext) =>
    `{${ctx._patterns?.map(this.visitLabelledPattern).join(', ') ?? ''}}`;
  visitPatternList = (ctx: PatternListContext) =>
    `[${ctx._patterns?.map(this.visitPattern).join(', ') ?? ''}]`;
  visitPatternCons = (ctx: PatternConsContext) =>
    `cons(${this.visitPattern(ctx._head)}, ${this.visitPattern(ctx._tail)})`;
  visitPatternFalse = (ctx: PatternFalseContext) => 'false';
  visitPatternTrue = (ctx: PatternTrueContext) => 'true';
  visitPatternUnit = (ctx: PatternUnitContext) => 'unit';
  visitPatternInt = (ctx: PatternIntContext) => ctx._n.text;
  visitPatternSucc = (ctx: PatternSuccContext) =>
    `succ(${this.visitPattern(ctx._pattern_)})`;
  visitPatternVar = (ctx: PatternVarContext) => ctx._name.text;
  visitParenthesisedPattern = (ctx: ParenthesisedPatternContext) =>
    `(${this.visitPattern(ctx._pattern_)})`;
}
